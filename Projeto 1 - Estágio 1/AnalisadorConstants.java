/* Generated By:JavaCC: Do not edit this line. AnalisadorConstants.java */

/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface AnalisadorConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int ARRAY = 5;
  /** RegularExpression Id. */
  int ASM = 6;
  /** RegularExpression Id. */
  int BEGIN = 7;
  /** RegularExpression Id. */
  int CASE = 8;
  /** RegularExpression Id. */
  int CONST = 9;
  /** RegularExpression Id. */
  int CONSTRUCTOR = 10;
  /** RegularExpression Id. */
  int DESTRUCTOR = 11;
  /** RegularExpression Id. */
  int DIV = 12;
  /** RegularExpression Id. */
  int DO = 13;
  /** RegularExpression Id. */
  int DOWNTO = 14;
  /** RegularExpression Id. */
  int ELSE = 15;
  /** RegularExpression Id. */
  int END = 16;
  /** RegularExpression Id. */
  int FILE = 17;
  /** RegularExpression Id. */
  int FOR = 18;
  /** RegularExpression Id. */
  int FOWARD = 19;
  /** RegularExpression Id. */
  int FUNCTION = 20;
  /** RegularExpression Id. */
  int GOTO = 21;
  /** RegularExpression Id. */
  int IF = 22;
  /** RegularExpression Id. */
  int IMPLEMENTATION = 23;
  /** RegularExpression Id. */
  int IN = 24;
  /** RegularExpression Id. */
  int INLINE = 25;
  /** RegularExpression Id. */
  int INTERFACE = 26;
  /** RegularExpression Id. */
  int LABEL = 27;
  /** RegularExpression Id. */
  int MOD = 28;
  /** RegularExpression Id. */
  int NIL = 29;
  /** RegularExpression Id. */
  int OBJECT = 30;
  /** RegularExpression Id. */
  int OF = 31;
  /** RegularExpression Id. */
  int PACKED = 32;
  /** RegularExpression Id. */
  int PROCEDURE = 33;
  /** RegularExpression Id. */
  int PROGRAMA = 34;
  /** RegularExpression Id. */
  int RECORD = 35;
  /** RegularExpression Id. */
  int REPEAT = 36;
  /** RegularExpression Id. */
  int READ = 37;
  /** RegularExpression Id. */
  int SET = 38;
  /** RegularExpression Id. */
  int SHL = 39;
  /** RegularExpression Id. */
  int SHR = 40;
  /** RegularExpression Id. */
  int THEN = 41;
  /** RegularExpression Id. */
  int TO = 42;
  /** RegularExpression Id. */
  int UNIT = 43;
  /** RegularExpression Id. */
  int UNTIL = 44;
  /** RegularExpression Id. */
  int USES = 45;
  /** RegularExpression Id. */
  int VAR = 46;
  /** RegularExpression Id. */
  int WHILE = 47;
  /** RegularExpression Id. */
  int WITH = 48;
  /** RegularExpression Id. */
  int XOR = 49;
  /** RegularExpression Id. */
  int TYPE = 50;
  /** RegularExpression Id. */
  int DIGITOS = 51;
  /** RegularExpression Id. */
  int LETRAS = 52;
  /** RegularExpression Id. */
  int NUMERO = 53;
  /** RegularExpression Id. */
  int IDENTIFICADOR = 54;
  /** RegularExpression Id. */
  int STRING = 55;
  /** RegularExpression Id. */
  int OPERADOR_SOMA = 56;
  /** RegularExpression Id. */
  int OPERADOR_SUBTRACAO = 57;
  /** RegularExpression Id. */
  int OPERADOR_DIVISAO = 58;
  /** RegularExpression Id. */
  int OPERADOR_MULTIPLICACAO = 59;
  /** RegularExpression Id. */
  int OPERADOR_DECREMENTO = 60;
  /** RegularExpression Id. */
  int OPERADOR_INCREMENTO = 61;
  /** RegularExpression Id. */
  int MAIORQUE = 62;
  /** RegularExpression Id. */
  int MENORQUE = 63;
  /** RegularExpression Id. */
  int MAIORIGUAL = 64;
  /** RegularExpression Id. */
  int MENORIGUAL = 65;
  /** RegularExpression Id. */
  int IGUAL = 66;
  /** RegularExpression Id. */
  int DIFERENTE = 67;
  /** RegularExpression Id. */
  int ATRIBUICAO = 68;
  /** RegularExpression Id. */
  int OR = 69;
  /** RegularExpression Id. */
  int AND = 70;
  /** RegularExpression Id. */
  int NOT = 71;
  /** RegularExpression Id. */
  int LPARENTE = 72;
  /** RegularExpression Id. */
  int DPARENTE = 73;
  /** RegularExpression Id. */
  int LCOLCHETES = 74;
  /** RegularExpression Id. */
  int DCOLCHETES = 75;
  /** RegularExpression Id. */
  int DOIS_PONTOS = 76;
  /** RegularExpression Id. */
  int ASPAS_SIMPLES = 77;
  /** RegularExpression Id. */
  int ASPAS_DUPLA = 78;
  /** RegularExpression Id. */
  int PONTO_VIRGULA = 79;
  /** RegularExpression Id. */
  int VIRGULA = 80;
  /** RegularExpression Id. */
  int PONTO = 81;
  /** RegularExpression Id. */
  int PONTOS = 82;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\n\"",
    "\"\\r\"",
    "\"\\r\\n\"",
    "\"array \"",
    "\"asm \"",
    "\"begin \"",
    "\"case \"",
    "\"const \"",
    "\"constructor \"",
    "\"destructor \"",
    "\"div \"",
    "\"do \"",
    "\"downto \"",
    "\"else \"",
    "\"end \"",
    "\"file \"",
    "\"for \"",
    "\"foward \"",
    "\"function \"",
    "\"goto \"",
    "\"if \"",
    "\"implementation \"",
    "\"in \"",
    "\"inline \"",
    "\"interface \"",
    "\"label \"",
    "\"mod \"",
    "\"nil \"",
    "\"object \"",
    "\"of \"",
    "\"PACKED \"",
    "\"procedure \"",
    "\"program \"",
    "\"record \"",
    "\"repeat \"",
    "\"read \"",
    "\"set \"",
    "\"shl \"",
    "\"shr \"",
    "\"then \"",
    "\"to \"",
    "\"unit \"",
    "\"until \"",
    "\"uses \"",
    "\"var \"",
    "\"while \"",
    "\"with \"",
    "\"xor \"",
    "<TYPE>",
    "<DIGITOS>",
    "<LETRAS>",
    "<NUMERO>",
    "<IDENTIFICADOR>",
    "<STRING>",
    "\"+\"",
    "\"-\"",
    "\"/\"",
    "\"*\"",
    "\"--\"",
    "\"++\"",
    "\">\"",
    "\"<\"",
    "\">=\"",
    "\"<=\"",
    "\"=\"",
    "\"<>\"",
    "\":=\"",
    "\"or\"",
    "\"and\"",
    "\"not\"",
    "\"(\"",
    "\")\"",
    "\"[\"",
    "\"]\"",
    "\":\"",
    "\"\\\'\"",
    "\"\\\"\"",
    "\";\"",
    "\",\"",
    "\".\"",
    "\".. \"",
  };

}
