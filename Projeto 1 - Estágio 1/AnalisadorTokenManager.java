/* Generated By:JavaCC: Do not edit this line. AnalisadorTokenManager.java */

/** Token Manager. */
public class AnalisadorTokenManager implements AnalisadorConstants
{

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x1c000000000L) != 0L)
         {
            jjmatchedKind = 52;
            return 8;
         }
         if ((active0 & 0x700L) != 0L)
         {
            jjmatchedKind = 52;
            return 2;
         }
         if ((active0 & 0x3fe3ff83ff860L) != 0L || (active1 & 0xe0L) != 0L)
         {
            jjmatchedKind = 52;
            return 28;
         }
         if ((active0 & 0x7c00000L) != 0L)
         {
            jjmatchedKind = 52;
            return 14;
         }
         if ((active0 & 0x80L) != 0L)
         {
            jjmatchedKind = 52;
            return 21;
         }
         return -1;
      case 1:
         if ((active0 & 0x3fffff8ffffe0L) != 0L || (active1 & 0xe0L) != 0L)
         {
            jjmatchedKind = 54;
            jjmatchedPos = 1;
            return 28;
         }
         if ((active0 & 0x7000000L) != 0L)
         {
            jjmatchedKind = 54;
            jjmatchedPos = 1;
            return 13;
         }
         return -1;
      case 2:
         if ((active0 & 0x3fbff7abfdfe0L) != 0L || (active1 & 0xc0L) != 0L)
         {
            jjmatchedKind = 54;
            jjmatchedPos = 2;
            return 28;
         }
         if ((active0 & 0x4000000L) != 0L)
         {
            jjmatchedKind = 54;
            jjmatchedPos = 2;
            return 12;
         }
         return -1;
      case 3:
         if ((active0 & 0x4000000L) != 0L)
         {
            jjmatchedKind = 54;
            jjmatchedPos = 3;
            return 11;
         }
         if ((active0 & 0x1ba3f4abacfa0L) != 0L)
         {
            jjmatchedKind = 54;
            jjmatchedPos = 3;
            return 28;
         }
         return -1;
      case 4:
         if ((active0 & 0x901f4e984ea0L) != 0L)
         {
            jjmatchedKind = 54;
            jjmatchedPos = 4;
            return 28;
         }
         return -1;
      case 5:
         if ((active0 & 0x1f46984c00L) != 0L)
         {
            jjmatchedKind = 54;
            jjmatchedPos = 5;
            return 28;
         }
         return -1;
      case 6:
         if ((active0 & 0x604900c00L) != 0L)
         {
            jjmatchedKind = 54;
            jjmatchedPos = 6;
            return 28;
         }
         return -1;
      case 7:
         if ((active0 & 0x204900c00L) != 0L)
         {
            jjmatchedKind = 54;
            jjmatchedPos = 7;
            return 28;
         }
         return -1;
      case 8:
         if ((active0 & 0x204800c00L) != 0L)
         {
            jjmatchedKind = 54;
            jjmatchedPos = 8;
            return 28;
         }
         return -1;
      case 9:
         if ((active0 & 0x800c00L) != 0L)
         {
            jjmatchedKind = 54;
            jjmatchedPos = 9;
            return 28;
         }
         return -1;
      case 10:
         if ((active0 & 0x800400L) != 0L)
         {
            jjmatchedKind = 54;
            jjmatchedPos = 10;
            return 28;
         }
         return -1;
      case 11:
         if ((active0 & 0x800000L) != 0L)
         {
            jjmatchedKind = 54;
            jjmatchedPos = 11;
            return 28;
         }
         return -1;
      case 12:
         if ((active0 & 0x800000L) != 0L)
         {
            jjmatchedKind = 54;
            jjmatchedPos = 12;
            return 28;
         }
         return -1;
      case 13:
         if ((active0 & 0x800000L) != 0L)
         {
            jjmatchedKind = 54;
            jjmatchedPos = 13;
            return 28;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 13:
         jjmatchedKind = 3;
         return jjMoveStringLiteralDfa1_0(0x10L, 0x0L);
      case 34:
         return jjStopAtPos(0, 78);
      case 39:
         return jjStopAtPos(0, 77);
      case 40:
         return jjStopAtPos(0, 72);
      case 41:
         return jjStopAtPos(0, 73);
      case 42:
         return jjStopAtPos(0, 59);
      case 43:
         jjmatchedKind = 56;
         return jjMoveStringLiteralDfa1_0(0x2000000000000000L, 0x0L);
      case 44:
         return jjStopAtPos(0, 80);
      case 45:
         jjmatchedKind = 57;
         return jjMoveStringLiteralDfa1_0(0x1000000000000000L, 0x0L);
      case 46:
         jjmatchedKind = 81;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x40000L);
      case 47:
         return jjStopAtPos(0, 58);
      case 58:
         jjmatchedKind = 76;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x10L);
      case 59:
         return jjStopAtPos(0, 79);
      case 60:
         jjmatchedKind = 63;
         return jjMoveStringLiteralDfa1_0(0x0L, 0xaL);
      case 61:
         return jjStopAtPos(0, 66);
      case 62:
         jjmatchedKind = 62;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1L);
      case 91:
         return jjStopAtPos(0, 74);
      case 93:
         return jjStopAtPos(0, 75);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa1_0(0x60L, 0x40L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa1_0(0x80L, 0x0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa1_0(0x700L, 0x0L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa1_0(0x7800L, 0x0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa1_0(0x18000L, 0x0L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa1_0(0x1e0000L, 0x0L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa1_0(0x200000L, 0x0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa1_0(0x7c00000L, 0x0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa1_0(0x8000000L, 0x0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa1_0(0x10000000L, 0x0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa1_0(0x20000000L, 0x80L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa1_0(0xc0000000L, 0x20L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa1_0(0x700000000L, 0x0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa1_0(0x3800000000L, 0x0L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa1_0(0x1c000000000L, 0x0L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa1_0(0x60000000000L, 0x0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa1_0(0x380000000000L, 0x0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa1_0(0x400000000000L, 0x0L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa1_0(0x1800000000000L, 0x0L);
      case 88:
      case 120:
         return jjMoveStringLiteralDfa1_0(0x2000000000000L, 0x0L);
      default :
         return jjMoveNfa_0(3, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0, long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1);
      return 1;
   }
   switch(curChar)
   {
      case 10:
         if ((active0 & 0x10L) != 0L)
            return jjStopAtPos(1, 4);
         break;
      case 43:
         if ((active0 & 0x2000000000000000L) != 0L)
            return jjStopAtPos(1, 61);
         break;
      case 45:
         if ((active0 & 0x1000000000000000L) != 0L)
            return jjStopAtPos(1, 60);
         break;
      case 46:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x40000L);
      case 61:
         if ((active1 & 0x1L) != 0L)
            return jjStopAtPos(1, 64);
         else if ((active1 & 0x2L) != 0L)
            return jjStopAtPos(1, 65);
         else if ((active1 & 0x10L) != 0L)
            return jjStopAtPos(1, 68);
         break;
      case 62:
         if ((active1 & 0x8L) != 0L)
            return jjStopAtPos(1, 67);
         break;
      case 65:
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x400108000100L, active1, 0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa2_0(active0, 0x40000000L, active1, 0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x7800000880L, active1, 0L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa2_0(active0, 0x80400000L, active1, 0L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x838000000000L, active1, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000020021000L, active1, 0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000L, active1, 0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0x800000L, active1, 0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0x180007010000L, active1, 0x40L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa2_0(active0, 0x20400102c6600L, active1, 0x80L);
      case 82:
      case 114:
         if ((active1 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(1, 54, 28);
         return jjMoveStringLiteralDfa2_0(active0, 0x600000020L, active1, 0L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa2_0(active0, 0x200000000040L, active1, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x100000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(0, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1);
      return 2;
   }
   switch(curChar)
   {
      case 32:
         if ((active0 & 0x2000L) != 0L)
            return jjStopAtPos(2, 13);
         else if ((active0 & 0x400000L) != 0L)
            return jjStopAtPos(2, 22);
         else if ((active0 & 0x1000000L) != 0L)
            return jjStopAtPos(2, 24);
         else if ((active0 & 0x80000000L) != 0L)
            return jjStopAtPos(2, 31);
         else if ((active0 & 0x40000000000L) != 0L)
            return jjStopAtPos(2, 42);
         else if ((active1 & 0x40000L) != 0L)
            return jjStopAtPos(2, 82);
         break;
      case 65:
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000000000L, active1, 0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000000L, active1, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa3_0(active0, 0x900000000L, active1, 0L);
      case 68:
      case 100:
         if ((active1 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(2, 54, 28);
         return jjMoveStringLiteralDfa3_0(active0, 0x10010000L, active1, 0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x220000000000L, active1, 0L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa3_0(active0, 0x80L, active1, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x880000000000L, active1, 0L);
      case 74:
      case 106:
         return jjMoveStringLiteralDfa3_0(active0, 0x40000000L, active1, 0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x8022020000L, active1, 0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa3_0(active0, 0x40L, active1, 0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x100600L, active1, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x600000000L, active1, 0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000800000L, active1, 0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa3_0(active0, 0x2410000040020L, active1, 0L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x8900L, active1, 0L);
      case 84:
      case 116:
         if ((active1 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(2, 54, 28);
         return jjMoveStringLiteralDfa3_0(active0, 0x1104004200000L, active1, 0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000L, active1, 0L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa3_0(active0, 0x84000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(1, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, 0L);
      return 3;
   }
   switch(curChar)
   {
      case 32:
         if ((active0 & 0x40L) != 0L)
            return jjStopAtPos(3, 6);
         else if ((active0 & 0x1000L) != 0L)
            return jjStopAtPos(3, 12);
         else if ((active0 & 0x10000L) != 0L)
            return jjStopAtPos(3, 16);
         else if ((active0 & 0x40000L) != 0L)
            return jjStopAtPos(3, 18);
         else if ((active0 & 0x10000000L) != 0L)
            return jjStopAtPos(3, 28);
         else if ((active0 & 0x20000000L) != 0L)
            return jjStopAtPos(3, 29);
         else if ((active0 & 0x4000000000L) != 0L)
            return jjStopAtPos(3, 38);
         else if ((active0 & 0x8000000000L) != 0L)
            return jjStopAtPos(3, 39);
         else if ((active0 & 0x10000000000L) != 0L)
            return jjStopAtPos(3, 40);
         else if ((active0 & 0x400000000000L) != 0L)
            return jjStopAtPos(3, 46);
         else if ((active0 & 0x2000000000000L) != 0L)
            return jjStopAtPos(3, 49);
         break;
      case 65:
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x80020L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0x200100000L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa4_0(active0, 0x2000000000L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa4_0(active0, 0x104c028100L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa4_0(active0, 0x400000000L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000000000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x100002000080L);
      case 75:
      case 107:
         return jjMoveStringLiteralDfa4_0(active0, 0x100000000L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa4_0(active0, 0x800000800000L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa4_0(active0, 0x20000004000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa4_0(active0, 0x800200000L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x200000000600L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa4_0(active0, 0x80000000800L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, 0L);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(2, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, 0L);
      return 4;
   }
   switch(curChar)
   {
      case 32:
         if ((active0 & 0x100L) != 0L)
            return jjStopAtPos(4, 8);
         else if ((active0 & 0x8000L) != 0L)
            return jjStopAtPos(4, 15);
         else if ((active0 & 0x20000L) != 0L)
            return jjStopAtPos(4, 17);
         else if ((active0 & 0x200000L) != 0L)
            return jjStopAtPos(4, 21);
         else if ((active0 & 0x2000000000L) != 0L)
            return jjStopAtPos(4, 37);
         else if ((active0 & 0x20000000000L) != 0L)
            return jjStopAtPos(4, 41);
         else if ((active0 & 0x80000000000L) != 0L)
            return jjStopAtPos(4, 43);
         else if ((active0 & 0x200000000000L) != 0L)
            return jjStopAtPos(4, 45);
         else if ((active0 & 0x1000000000000L) != 0L)
            return jjStopAtPos(4, 48);
         break;
      case 65:
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x1000000000L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0x40000000L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa5_0(active0, 0x800300800000L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa5_0(active0, 0x100008000000L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000080L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa5_0(active0, 0xc04080800L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa5_0(active0, 0x104600L);
      case 89:
      case 121:
         return jjMoveStringLiteralDfa5_0(active0, 0x20L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0, 0L);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, 0L);
      return 5;
   }
   switch(curChar)
   {
      case 32:
         if ((active0 & 0x20L) != 0L)
            return jjStopAtPos(5, 5);
         else if ((active0 & 0x80L) != 0L)
            return jjStopAtPos(5, 7);
         else if ((active0 & 0x200L) != 0L)
            return jjStopAtPos(5, 9);
         else if ((active0 & 0x8000000L) != 0L)
            return jjStopAtPos(5, 27);
         else if ((active0 & 0x100000000000L) != 0L)
            return jjStopAtPos(5, 44);
         else if ((active0 & 0x800000000000L) != 0L)
            return jjStopAtPos(5, 47);
         break;
      case 65:
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0x400000000L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa6_0(active0, 0xb00080000L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa6_0(active0, 0x2000000L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa6_0(active0, 0x4000000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x100000L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa6_0(active0, 0x800000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa6_0(active0, 0x4000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa6_0(active0, 0x400L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa6_0(active0, 0x1040000000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa6_0(active0, 0x800L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0, 0L);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, 0L);
      return 6;
   }
   switch(curChar)
   {
      case 32:
         if ((active0 & 0x4000L) != 0L)
            return jjStopAtPos(6, 14);
         else if ((active0 & 0x80000L) != 0L)
            return jjStopAtPos(6, 19);
         else if ((active0 & 0x2000000L) != 0L)
            return jjStopAtPos(6, 25);
         else if ((active0 & 0x40000000L) != 0L)
            return jjStopAtPos(6, 30);
         else if ((active0 & 0x100000000L) != 0L)
            return jjStopAtPos(6, 32);
         else if ((active0 & 0x800000000L) != 0L)
            return jjStopAtPos(6, 35);
         else if ((active0 & 0x1000000000L) != 0L)
            return jjStopAtPos(6, 36);
         break;
      case 65:
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0x4000000L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa7_0(active0, 0x800L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa7_0(active0, 0x800000L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa7_0(active0, 0x400000000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0x100000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0x200000400L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0, 0L);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(5, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, 0L);
      return 7;
   }
   switch(curChar)
   {
      case 32:
         if ((active0 & 0x400000000L) != 0L)
            return jjStopAtPos(7, 34);
         break;
      case 67:
      case 99:
         return jjMoveStringLiteralDfa8_0(active0, 0x4000400L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa8_0(active0, 0x900000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa8_0(active0, 0x200000000L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa8_0(active0, 0x800L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0, 0L);
}
private int jjMoveStringLiteralDfa8_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(6, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, 0L);
      return 8;
   }
   switch(curChar)
   {
      case 32:
         if ((active0 & 0x100000L) != 0L)
            return jjStopAtPos(8, 20);
         break;
      case 69:
      case 101:
         return jjMoveStringLiteralDfa9_0(active0, 0x204000000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa9_0(active0, 0x800L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa9_0(active0, 0x800400L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0, 0L);
}
private int jjMoveStringLiteralDfa9_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(7, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, 0L);
      return 9;
   }
   switch(curChar)
   {
      case 32:
         if ((active0 & 0x4000000L) != 0L)
            return jjStopAtPos(9, 26);
         else if ((active0 & 0x200000000L) != 0L)
            return jjStopAtPos(9, 33);
         break;
      case 65:
      case 97:
         return jjMoveStringLiteralDfa10_0(active0, 0x800000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa10_0(active0, 0x400L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa10_0(active0, 0x800L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0, 0L);
}
private int jjMoveStringLiteralDfa10_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(8, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0, 0L);
      return 10;
   }
   switch(curChar)
   {
      case 32:
         if ((active0 & 0x800L) != 0L)
            return jjStopAtPos(10, 11);
         break;
      case 82:
      case 114:
         return jjMoveStringLiteralDfa11_0(active0, 0x400L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa11_0(active0, 0x800000L);
      default :
         break;
   }
   return jjStartNfa_0(9, active0, 0L);
}
private int jjMoveStringLiteralDfa11_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(9, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0, 0L);
      return 11;
   }
   switch(curChar)
   {
      case 32:
         if ((active0 & 0x400L) != 0L)
            return jjStopAtPos(11, 10);
         break;
      case 73:
      case 105:
         return jjMoveStringLiteralDfa12_0(active0, 0x800000L);
      default :
         break;
   }
   return jjStartNfa_0(10, active0, 0L);
}
private int jjMoveStringLiteralDfa12_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(10, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, active0, 0L);
      return 12;
   }
   switch(curChar)
   {
      case 79:
      case 111:
         return jjMoveStringLiteralDfa13_0(active0, 0x800000L);
      default :
         break;
   }
   return jjStartNfa_0(11, active0, 0L);
}
private int jjMoveStringLiteralDfa13_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(11, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(12, active0, 0L);
      return 13;
   }
   switch(curChar)
   {
      case 78:
      case 110:
         return jjMoveStringLiteralDfa14_0(active0, 0x800000L);
      default :
         break;
   }
   return jjStartNfa_0(12, active0, 0L);
}
private int jjMoveStringLiteralDfa14_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(12, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(13, active0, 0L);
      return 14;
   }
   switch(curChar)
   {
      case 32:
         if ((active0 & 0x800000L) != 0L)
            return jjStopAtPos(14, 23);
         break;
      default :
         break;
   }
   return jjStartNfa_0(13, active0, 0L);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 28;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 3:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 51)
                        kind = 51;
                     jjCheckNAdd(25);
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 55)
                        kind = 55;
                     jjCheckNAdd(23);
                  }
                  break;
               case 21:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 55)
                        kind = 55;
                     jjCheckNAdd(23);
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 54)
                        kind = 54;
                     jjCheckNAdd(27);
                  }
                  break;
               case 8:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 55)
                        kind = 55;
                     jjCheckNAdd(23);
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 54)
                        kind = 54;
                     jjCheckNAdd(27);
                  }
                  break;
               case 13:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 55)
                        kind = 55;
                     jjCheckNAdd(23);
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 54)
                        kind = 54;
                     jjCheckNAdd(27);
                  }
                  break;
               case 11:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 55)
                        kind = 55;
                     jjCheckNAdd(23);
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 54)
                        kind = 54;
                     jjCheckNAdd(27);
                  }
                  break;
               case 28:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 55)
                        kind = 55;
                     jjCheckNAdd(23);
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 54)
                        kind = 54;
                     jjCheckNAdd(27);
                  }
                  break;
               case 2:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 55)
                        kind = 55;
                     jjCheckNAdd(23);
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 54)
                        kind = 54;
                     jjCheckNAdd(27);
                  }
                  break;
               case 14:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 55)
                        kind = 55;
                     jjCheckNAdd(23);
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 54)
                        kind = 54;
                     jjCheckNAdd(27);
                  }
                  break;
               case 12:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 55)
                        kind = 55;
                     jjCheckNAdd(23);
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 54)
                        kind = 54;
                     jjCheckNAdd(27);
                  }
                  break;
               case 23:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 55)
                     kind = 55;
                  jjCheckNAdd(23);
                  break;
               case 24:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 51)
                     kind = 51;
                  jjCheckNAdd(25);
                  break;
               case 25:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 53)
                     kind = 53;
                  jjCheckNAdd(25);
                  break;
               case 27:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 54)
                     kind = 54;
                  jjCheckNAdd(27);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 3:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 52)
                        kind = 52;
                     jjCheckNAdd(27);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 55)
                        kind = 55;
                     jjCheckNAdd(23);
                  }
                  if ((0x400000004L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 21;
                  else if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 14;
                  else if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 8;
                  else if ((0x800000008L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 21:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 54)
                        kind = 54;
                     jjCheckNAdd(27);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 55)
                        kind = 55;
                     jjCheckNAdd(23);
                  }
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 20;
                  break;
               case 8:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 54)
                        kind = 54;
                     jjCheckNAdd(27);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 55)
                        kind = 55;
                     jjCheckNAdd(23);
                  }
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 13:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 54)
                        kind = 54;
                     jjCheckNAdd(27);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 55)
                        kind = 55;
                     jjCheckNAdd(23);
                  }
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 11:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 54)
                        kind = 54;
                     jjCheckNAdd(27);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 55)
                        kind = 55;
                     jjCheckNAdd(23);
                  }
                  if ((0x8000000080L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 10;
                  break;
               case 28:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 54)
                        kind = 54;
                     jjCheckNAdd(27);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 55)
                        kind = 55;
                     jjCheckNAdd(23);
                  }
                  break;
               case 2:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 54)
                        kind = 54;
                     jjCheckNAdd(27);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 55)
                        kind = 55;
                     jjCheckNAdd(23);
                  }
                  if ((0x10000000100L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 14:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 54)
                        kind = 54;
                     jjCheckNAdd(27);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 55)
                        kind = 55;
                     jjCheckNAdd(23);
                  }
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 12:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 54)
                        kind = 54;
                     jjCheckNAdd(27);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 55)
                        kind = 55;
                     jjCheckNAdd(23);
                  }
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 0:
                  if ((0x4000000040000L & l) != 0L && kind > 50)
                     kind = 50;
                  break;
               case 1:
                  if ((0x200000002L & l) != 0L)
                     jjCheckNAdd(0);
                  break;
               case 4:
                  if ((0x8000000080L & l) != 0L && kind > 50)
                     kind = 50;
                  break;
               case 5:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 6:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 7:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 9:
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 10:
                  if ((0x2000000020L & l) != 0L)
                     jjCheckNAdd(0);
                  break;
               case 15:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 16:
                  if ((0x400000004000L & l) != 0L && kind > 50)
                     kind = 50;
                  break;
               case 17:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 16;
                  break;
               case 18:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 17;
                  break;
               case 19:
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 18;
                  break;
               case 20:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 19;
                  break;
               case 22:
                  if ((0x400000004L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 21;
                  break;
               case 23:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 55)
                     kind = 55;
                  jjCheckNAdd(23);
                  break;
               case 26:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 52)
                     kind = 52;
                  jjCheckNAdd(27);
                  break;
               case 27:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 54)
                     kind = 54;
                  jjCheckNAdd(27);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 28 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
};

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, "\53", "\55", "\57", "\52", "\55\55", "\53\53", "\76", "\74", "\76\75", 
"\74\75", "\75", "\74\76", "\72\75", null, null, null, "\50", "\51", "\133", "\135", 
"\72", "\47", "\42", "\73", "\54", "\56", "\56\56\40", };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
};
static final long[] jjtoToken = {
   0xffffffffffffffe1L, 0x7ffffL, 
};
static final long[] jjtoSkip = {
   0x1eL, 0x0L, 
};
protected SimpleCharStream input_stream;
private final int[] jjrounds = new int[28];
private final int[] jjstateSet = new int[56];
private final StringBuilder jjimage = new StringBuilder();
private StringBuilder image = jjimage;
private int jjimageLen;
private int lengthOfMatch;
protected char curChar;
/** Constructor. */
public AnalisadorTokenManager(SimpleCharStream stream){
   if (SimpleCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}

/** Constructor. */
public AnalisadorTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 28; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
public void SwitchTo(int lexState)
{
   if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }
   image = jjimage;
   image.setLength(0);
   jjimageLen = 0;

   try { input_stream.backup(0);
      while (curChar <= 32 && (0x100000400L & (1L << curChar)) != 0L)
         curChar = input_stream.BeginToken();
   }
   catch (java.io.IOException e1) { continue EOFLoop; }
   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         TokenLexicalActions(matchedToken);
         return matchedToken;
      }
      else
      {
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

void TokenLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      case 5 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                           System.out.println("ARRAY -> "+image);
         break;
      case 6 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                        System.out.println("ASM -> "+image);
         break;
      case 7 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                            System.out.println("BEGIN -> "+image);
         break;
      case 8 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                           System.out.println("CASE -> "+image);
         break;
      case 9 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                             System.out.println("CONST -> "+image);
         break;
      case 10 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                        System.out.println("CONSTRUCTOR -> "+image);
         break;
      case 11 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                      System.out.println("DESTRUCTOR -> "+image);
         break;
      case 12 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                         System.out.println("DIV -> "+image);
         break;
      case 13 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                      System.out.println("DO -> "+image);
         break;
      case 14 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                              System.out.println("DOWNTO -> "+image);
         break;
      case 15 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                          System.out.println("ELSE -> "+image);
         break;
      case 16 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                        System.out.println("END -> "+image);
         break;
      case 17 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                          System.out.println("FILE -> "+image);
         break;
      case 18 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                        System.out.println("FOR -> "+image);
         break;
      case 19 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                              System.out.println("FOWARD -> "+image);
         break;
      case 20 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                  System.out.println("FUNCTION -> "+image);
         break;
      case 21 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                          System.out.println("GOTO -> "+image);
         break;
      case 22 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                      System.out.println("IF -> "+image);
         break;
      case 23 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                               System.out.println("IMPLEMENTATION -> "+image);
         break;
      case 24 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                      System.out.println("IN -> "+image);
         break;
      case 25 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                              System.out.println("INLINE -> "+image);
         break;
      case 26 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                    System.out.println("INTERFACE -> "+image);
         break;
      case 27 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                            System.out.println("LABEL -> "+image);
         break;
      case 28 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                        System.out.println("MOD -> "+image);
         break;
      case 29 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                        System.out.println("NIL -> "+image);
         break;
      case 30 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                              System.out.println("OBJECT -> "+image);
         break;
      case 31 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                      System.out.println("OF -> "+image);
         break;
      case 32 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                              System.out.println("PACKED -> "+image);
         break;
      case 33 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                    System.out.println("PROCEDURE -> "+image);
         break;
      case 34 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                 System.out.println("PROGRAM -> "+image);
         break;
      case 35 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                              System.out.println("RECORD -> "+image);
         break;
      case 36 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                              System.out.println("REPEAT -> "+image);
         break;
      case 37 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                          System.out.println("READ -> "+image);
         break;
      case 38 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                        System.out.println("SET -> "+image);
         break;
      case 39 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                        System.out.println("SHL -> "+image);
         break;
      case 40 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                        System.out.println("SHR -> "+image);
         break;
      case 41 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                          System.out.println("THEN -> "+image);
         break;
      case 42 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                      System.out.println("TO -> "+image);
         break;
      case 43 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                          System.out.println("UNIT -> "+image);
         break;
      case 44 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                            System.out.println("UNTIL -> "+image);
         break;
      case 45 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                          System.out.println("USES -> "+image);
         break;
      case 46 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                        System.out.println("VAR -> "+image);
         break;
      case 47 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                            System.out.println("WHILE -> "+image);
         break;
      case 48 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                          System.out.println("WITH -> "+image);
         break;
      case 49 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                        System.out.println("XOR -> "+image);
         break;
      case 50 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                                            System.out.println("TYPE -> "+image);
         break;
      case 53 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                  System.out.print("NUMERO "+image+"\u005cr\u005cn");
         break;
      case 54 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                                                             System.out.print("IDENTIFICADOR -> "+image+"\u005cr\u005cn");
         break;
      case 55 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                                                         System.out.print("STRING -> "+image+"\u005cr\u005cn");
         break;
      case 56 :
        image.append(jjstrLiteralImages[56]);
        lengthOfMatch = jjstrLiteralImages[56].length();
                              System.out.println("OPERADOR_SOMA -> "+image);
         break;
      case 57 :
        image.append(jjstrLiteralImages[57]);
        lengthOfMatch = jjstrLiteralImages[57].length();
                                    System.out.println("OPERADOR_SUBTRACAO -> "+image);
         break;
      case 58 :
        image.append(jjstrLiteralImages[58]);
        lengthOfMatch = jjstrLiteralImages[58].length();
                                  System.out.println("OPERADOR_DIVISAO -> "+image);
         break;
      case 59 :
        image.append(jjstrLiteralImages[59]);
        lengthOfMatch = jjstrLiteralImages[59].length();
                                        System.out.println("OPERADOR_MULTIPLICACAO -> "+image);
         break;
      case 60 :
        image.append(jjstrLiteralImages[60]);
        lengthOfMatch = jjstrLiteralImages[60].length();
                                      System.out.println("OPERADOR_DECREMENTO -> "+image);
         break;
      case 61 :
        image.append(jjstrLiteralImages[61]);
        lengthOfMatch = jjstrLiteralImages[61].length();
                                      System.out.println("OPERADOR_INCREMENTO -> "+image);
         break;
      case 62 :
        image.append(jjstrLiteralImages[62]);
        lengthOfMatch = jjstrLiteralImages[62].length();
                        System.out.println("MAIORQUE -> "+image);
         break;
      case 63 :
        image.append(jjstrLiteralImages[63]);
        lengthOfMatch = jjstrLiteralImages[63].length();
                         System.out.println("MENORQUE -> "+image);
         break;
      case 64 :
        image.append(jjstrLiteralImages[64]);
        lengthOfMatch = jjstrLiteralImages[64].length();
                            System.out.println("MAIORIGUAL -> "+image);
         break;
      case 65 :
        image.append(jjstrLiteralImages[65]);
        lengthOfMatch = jjstrLiteralImages[65].length();
                            System.out.println("MENORIGUAL -> "+image);
         break;
      case 66 :
        image.append(jjstrLiteralImages[66]);
        lengthOfMatch = jjstrLiteralImages[66].length();
                      System.out.println("IGUAL -> "+image);
         break;
      case 67 :
        image.append(jjstrLiteralImages[67]);
        lengthOfMatch = jjstrLiteralImages[67].length();
                           System.out.println("DIFERENTE -> "+image);
         break;
      case 68 :
        image.append(jjstrLiteralImages[68]);
        lengthOfMatch = jjstrLiteralImages[68].length();
                             System.out.println("ATRIBUICAO -> "+image);
         break;
      case 69 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                     System.out.println("OR -> "+image);
         break;
      case 70 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                      System.out.println("AND -> "+image);
         break;
      case 71 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                      System.out.println("NOT -> "+image);
         break;
      case 72 :
        image.append(jjstrLiteralImages[72]);
        lengthOfMatch = jjstrLiteralImages[72].length();
                         System.out.println("LPARENTE -> "+image);
         break;
      case 73 :
        image.append(jjstrLiteralImages[73]);
        lengthOfMatch = jjstrLiteralImages[73].length();
                          System.out.println("DPARENTE -> "+image);
         break;
      case 74 :
        image.append(jjstrLiteralImages[74]);
        lengthOfMatch = jjstrLiteralImages[74].length();
                            System.out.println("LCOLCHETES -> "+image);
         break;
      case 75 :
        image.append(jjstrLiteralImages[75]);
        lengthOfMatch = jjstrLiteralImages[75].length();
                            System.out.println("DCOLCHETES -> "+image);
         break;
      case 76 :
        image.append(jjstrLiteralImages[76]);
        lengthOfMatch = jjstrLiteralImages[76].length();
                             System.out.println("DOIS_PONTOS -> "+image);
         break;
      case 77 :
        image.append(jjstrLiteralImages[77]);
        lengthOfMatch = jjstrLiteralImages[77].length();
                               System.out.println("ASPAS_SIMPLES -> "+image);
         break;
      case 78 :
        image.append(jjstrLiteralImages[78]);
        lengthOfMatch = jjstrLiteralImages[78].length();
                              System.out.println("ASPAS_DUPLA -> "+image);
         break;
      case 79 :
        image.append(jjstrLiteralImages[79]);
        lengthOfMatch = jjstrLiteralImages[79].length();
                               System.out.println("PONTO_VIRGULA -> "+image);
         break;
      case 80 :
        image.append(jjstrLiteralImages[80]);
        lengthOfMatch = jjstrLiteralImages[80].length();
                         System.out.println("VIRGULA -> "+image);
         break;
      case 81 :
        image.append(jjstrLiteralImages[81]);
        lengthOfMatch = jjstrLiteralImages[81].length();
                       System.out.println("PONTO -> "+image);
         break;
      case 82 :
        image.append(jjstrLiteralImages[82]);
        lengthOfMatch = jjstrLiteralImages[82].length();
                          System.out.println("PONTOS -> "+image);
         break;
      default :
         break;
   }
}
private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

}
