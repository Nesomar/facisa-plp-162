/* Generated By:JavaCC: Do not edit this line. Analisador.java */
public class Analisador implements AnalisadorConstants {

/*impressão dos tokens recebidos como entrada */
    public void processa() throws Exception {
        while (true) {
            Token t = getNextToken();
            String nomeToken = tokenImage[t.kind];
            System.out.println(nomeToken);
            if (t.kind == ponto_virg) /* para de ler até encontrar um ponto e vírgula */
                break;
        }
    }

   /* método main que recebe a expressão e chama o método acima */
   public static void main(String[] args) {
            System.out.print("Input:");
            Analisador analisador = new Analisador(System.in);
            try {
                  analisador.processa();
            } catch (Exception e) {
                  System.out.println(e.getMessage());
                  e.printStackTrace();
            }
      }

/*Gramatina Lexical Inicio*/

/*Sintatica INICIO*/
  final public void Programa() throws ParseException {
    Program();
    jj_consume_token(0);
  }

  final public void Program() throws ParseException {
    jj_consume_token(PROGRAMA);
    jj_consume_token(IDENTIFICADOR);
    jj_consume_token(DPARENTE);
    Block();
    jj_consume_token(LPARENTE);
    jj_consume_token(0);
  }

  final public void Block() throws ParseException {
    Variable_Declaration_Part();
    Statement_Part();
  }

  final public void Variable_Declaration_Part() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 0:
      jj_consume_token(0);
      break;
    case VAR:
      jj_consume_token(VAR);
      Variable_Declaration();
      jj_consume_token(PONTO_VIRGULA);
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENTIFICADOR:
          ;
          break;
        default:
          jj_la1[0] = jj_gen;
          break label_1;
        }
        Variable_Declaration();
        jj_consume_token(PONTO_VIRGULA);
      }
      break;
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void Variable_Declaration() throws ParseException {
    jj_consume_token(IDENTIFICADOR);
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VIRGULA:
        ;
        break;
      default:
        jj_la1[2] = jj_gen;
        break label_2;
      }
      jj_consume_token(VIRGULA);
      jj_consume_token(IDENTIFICADOR);
    }
    jj_consume_token(DOIS_PONTOS);
    Type();
  }

  final public void Type() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TYPE:
      jj_consume_token(TYPE);
      break;
    case ARRAY:
      ArrayType();
      break;
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void ArrayType() throws ParseException {
    jj_consume_token(ARRAY);
    jj_consume_token(LCOLCHETES);
    IndexRange();
    jj_consume_token(DCOLCHETES);
    jj_consume_token(OF);
    jj_consume_token(TYPE);
  }

  final public void IndexRange() throws ParseException {
    jj_consume_token(NUMERO);
    jj_consume_token(PONTOS);
    jj_consume_token(NUMERO);
  }

  final public void Statement_Part() throws ParseException {
    Compound_Statement();
  }

  final public void Compound_Statement() throws ParseException {
    jj_consume_token(BEGIN);
    Statement();
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PONTO_VIRGULA:
        ;
        break;
      default:
        jj_la1[4] = jj_gen;
        break label_3;
      }
      jj_consume_token(PONTO_VIRGULA);
      Statement();
    }
    jj_consume_token(END);
  }

  final public void Statement() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case READ:
    case IDENTIFICADOR:
      Simple_Statement();
      break;
    case BEGIN:
    case IF:
    case WHILE:
      Structured_Statement();
      break;
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void Simple_Statement() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFICADOR:
      Assignment_Statement();
      break;
    case READ:
      Read_Statement();
      break;
    default:
      jj_la1[6] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void Assignment_Statement() throws ParseException {
    Variable();
    jj_consume_token(ATRIBUICAO);
    Expression();
  }

  final public void Read_Statement() throws ParseException {
    jj_consume_token(READ);
    jj_consume_token(LPARENTE);
    Variable();
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VIRGULA:
        ;
        break;
      default:
        jj_la1[7] = jj_gen;
        break label_4;
      }
      jj_consume_token(VIRGULA);
      Variable();
    }
    jj_consume_token(DPARENTE);
  }

  final public void Structured_Statement() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BEGIN:
      Compound_Statement();
      break;
    case IF:
      If_Statement();
      break;
    case WHILE:
      While_Statement();
      break;
    default:
      jj_la1[8] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void If_Statement() throws ParseException {
    jj_consume_token(IF);
    Expression();
    jj_consume_token(THEN);
    Statement();
    If_Statement_Fatoracao();
  }

  final public void If_Statement_Fatoracao() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ELSE:
      jj_consume_token(ELSE);
      Statement();
      break;
    default:
      jj_la1[9] = jj_gen;

    }
  }

  final public void While_Statement() throws ParseException {
    jj_consume_token(WHILE);
    Expression();
    jj_consume_token(DO);
    Statement();
  }

  final public void Expression() throws ParseException {
    Simple_Expression();
    Expression_Fatoracao();
  }

  final public void Expression_Fatoracao() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MAIORQUE:
    case MENORQUE:
    case MAIORIGUAL:
    case MENORIGUAL:
    case IGUAL:
    case DIFERENTE:
    case OR:
    case AND:
      Relational_Operator();
      Simple_Expression();
      break;
    default:
      jj_la1[10] = jj_gen;

    }
  }

  final public void Simple_Expression() throws ParseException {
    Sign();
    Term();
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OPERADOR_SOMA:
      case OPERADOR_SUBTRACAO:
        ;
        break;
      default:
        jj_la1[11] = jj_gen;
        break label_5;
      }
      Adding_Operator();
      Term();
    }
  }

  final public void Term() throws ParseException {
    Factor();
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OPERADOR_DIVISAO:
      case OPERADOR_MULTIPLICACAO:
        ;
        break;
      default:
        jj_la1[12] = jj_gen;
        break label_6;
      }
      Multiplying_Operator();
      Factor();
    }
  }

  final public void Factor() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFICADOR:
      Variable();
      break;
    case NUMERO:
    case ASPAS_SIMPLES:
    case ASPAS_DUPLA:
      Constant();
      break;
    case LPARENTE:
      jj_consume_token(LPARENTE);
      Expression();
      jj_consume_token(DPARENTE);
      break;
    case NOT:
      jj_consume_token(NOT);
      Factor();
      break;
    default:
      jj_la1[13] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void Relational_Operator() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IGUAL:
      jj_consume_token(IGUAL);
      break;
    case DIFERENTE:
      jj_consume_token(DIFERENTE);
      break;
    case MENORQUE:
      jj_consume_token(MENORQUE);
      break;
    case MENORIGUAL:
      jj_consume_token(MENORIGUAL);
      break;
    case MAIORIGUAL:
      jj_consume_token(MAIORIGUAL);
      break;
    case MAIORQUE:
      jj_consume_token(MAIORQUE);
      break;
    case OR:
      jj_consume_token(OR);
      break;
    case AND:
      jj_consume_token(AND);
      break;
    default:
      jj_la1[14] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void Sign() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OPERADOR_SOMA:
      jj_consume_token(OPERADOR_SOMA);
      break;
    case OPERADOR_SUBTRACAO:
      jj_consume_token(OPERADOR_SUBTRACAO);
      break;
    default:
      jj_la1[15] = jj_gen;

    }
  }

  final public void Adding_Operator() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OPERADOR_SOMA:
      jj_consume_token(OPERADOR_SOMA);
      break;
    case OPERADOR_SUBTRACAO:
      jj_consume_token(OPERADOR_SUBTRACAO);
      break;
    default:
      jj_la1[16] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void Multiplying_Operator() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OPERADOR_MULTIPLICACAO:
      jj_consume_token(OPERADOR_MULTIPLICACAO);
      break;
    case OPERADOR_DIVISAO:
      jj_consume_token(OPERADOR_DIVISAO);
      break;
    default:
      jj_la1[17] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void Variable() throws ParseException {
    jj_consume_token(IDENTIFICADOR);
    Indexed_Variable();
  }

  final public void Indexed_Variable() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LCOLCHETES:
      jj_consume_token(LCOLCHETES);
      Expression();
      jj_consume_token(DCOLCHETES);
      break;
    default:
      jj_la1[18] = jj_gen;

    }
  }

  final public void Constant() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NUMERO:
      jj_consume_token(NUMERO);
      break;
    case ASPAS_SIMPLES:
    case ASPAS_DUPLA:
      Character_Constant();
      break;
    case IDENTIFICADOR:
      jj_consume_token(IDENTIFICADOR);
      break;
    default:
      jj_la1[19] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void Letter_or_Digit() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LETRAS:
      jj_consume_token(LETRAS);
      break;
    case DIGITOS:
      jj_consume_token(DIGITOS);
      break;
    default:
      jj_la1[20] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void Character_Constant() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ASPAS_SIMPLES:
      jj_consume_token(ASPAS_SIMPLES);
      Letter_or_Digit();
      jj_consume_token(ASPAS_SIMPLES);
      break;
    case ASPAS_DUPLA:
      jj_consume_token(ASPAS_DUPLA);
      Letter_or_Digit();
      label_7:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case DIGITOS:
        case LETRAS:
          ;
          break;
        default:
          jj_la1[21] = jj_gen;
          break label_7;
        }
        Letter_or_Digit();
      }
      jj_consume_token(ASPAS_DUPLA);
      break;
    default:
      jj_la1[22] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  /** Generated Token Manager. */
  public AnalisadorTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[23];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x0,0x1,0x0,0x20,0x0,0x400080,0x0,0x0,0x400080,0x8000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x400000,0x4000,0x0,0x40000,0x0,0x408020,0x400020,0x0,0x8000,0x0,0xc0000000,0x3000000,0xc000000,0x600000,0xc0000000,0x3000000,0x3000000,0xc000000,0x0,0x600000,0x180000,0x180000,0x0,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x0,0x0,0x10000,0x0,0x8000,0x0,0x0,0x10000,0x0,0x0,0x6f,0x0,0x0,0x6180,0x6f,0x0,0x0,0x0,0x400,0x6000,0x0,0x0,0x6000,};
   }

  /** Constructor with InputStream. */
  public Analisador(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Analisador(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new AnalisadorTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 23; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 23; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Analisador(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new AnalisadorTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 23; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 23; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Analisador(AnalisadorTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 23; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(AnalisadorTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 23; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[83];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 23; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 83; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
