/* Generated By:JavaCC: Do not edit this line. AnalizadorLexicoConstants.java */

/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface AnalizadorLexicoConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int MAIN = 1;
  /** RegularExpression Id. */
  int PROGRAMA = 2;
  /** RegularExpression Id. */
  int LPAREN = 3;
  /** RegularExpression Id. */
  int RPAREN = 4;
  /** RegularExpression Id. */
  int LBRACE = 5;
  /** RegularExpression Id. */
  int RBRACE = 6;
  /** RegularExpression Id. */
  int SEMICOLON = 7;
  /** RegularExpression Id. */
  int INT = 8;
  /** RegularExpression Id. */
  int NUMBER = 9;
  /** RegularExpression Id. */
  int IDENTIFIER = 10;
  /** RegularExpression Id. */
  int AND = 16;
  /** RegularExpression Id. */
  int ARRAY = 17;
  /** RegularExpression Id. */
  int ASM = 18;
  /** RegularExpression Id. */
  int BEGIN = 19;
  /** RegularExpression Id. */
  int CASE = 20;
  /** RegularExpression Id. */
  int CONST = 21;
  /** RegularExpression Id. */
  int CONSTRUCTOR = 22;
  /** RegularExpression Id. */
  int DESTRUCTOR = 23;
  /** RegularExpression Id. */
  int DIV = 24;
  /** RegularExpression Id. */
  int DO = 25;
  /** RegularExpression Id. */
  int DOWNTO = 26;
  /** RegularExpression Id. */
  int ELSE = 27;
  /** RegularExpression Id. */
  int END = 28;
  /** RegularExpression Id. */
  int FILE = 29;
  /** RegularExpression Id. */
  int FOR = 30;
  /** RegularExpression Id. */
  int FOWARD = 31;
  /** RegularExpression Id. */
  int FUNCTION = 32;
  /** RegularExpression Id. */
  int GOTO = 33;
  /** RegularExpression Id. */
  int IF = 34;
  /** RegularExpression Id. */
  int IMPLEMENTATION = 35;
  /** RegularExpression Id. */
  int IN = 36;
  /** RegularExpression Id. */
  int INLINE = 37;
  /** RegularExpression Id. */
  int INTERFACE = 38;
  /** RegularExpression Id. */
  int LABEL = 39;
  /** RegularExpression Id. */
  int MOD = 40;
  /** RegularExpression Id. */
  int NIL = 41;
  /** RegularExpression Id. */
  int NOT = 42;
  /** RegularExpression Id. */
  int OBJECT = 43;
  /** RegularExpression Id. */
  int OF = 44;
  /** RegularExpression Id. */
  int OR = 45;
  /** RegularExpression Id. */
  int PACKED = 46;
  /** RegularExpression Id. */
  int PROCEDURE = 47;
  /** RegularExpression Id. */
  int PROGRAM = 48;
  /** RegularExpression Id. */
  int record = 49;
  /** RegularExpression Id. */
  int REPEAT = 50;
  /** RegularExpression Id. */
  int SET = 51;
  /** RegularExpression Id. */
  int SHL = 52;
  /** RegularExpression Id. */
  int SHR = 53;
  /** RegularExpression Id. */
  int STRING = 54;
  /** RegularExpression Id. */
  int THEN = 55;
  /** RegularExpression Id. */
  int TO = 56;
  /** RegularExpression Id. */
  int TYPE = 57;
  /** RegularExpression Id. */
  int UNIT = 58;
  /** RegularExpression Id. */
  int UNTIL = 59;
  /** RegularExpression Id. */
  int USES = 60;
  /** RegularExpression Id. */
  int var = 61;
  /** RegularExpression Id. */
  int WHILE = 62;
  /** RegularExpression Id. */
  int WITH = 63;
  /** RegularExpression Id. */
  int XOR = 64;
  /** RegularExpression Id. */
  int SUBTRACAO = 65;
  /** RegularExpression Id. */
  int ADICAO = 66;
  /** RegularExpression Id. */
  int MULTIPLICACAO = 67;
  /** RegularExpression Id. */
  int DIVISAOREAL = 68;
  /** RegularExpression Id. */
  int RESTODIVISAOINTEIRA = 69;
  /** RegularExpression Id. */
  int MAIORQUE = 70;
  /** RegularExpression Id. */
  int MENORQUE = 71;
  /** RegularExpression Id. */
  int MAIORIGUAL = 72;
  /** RegularExpression Id. */
  int MENORIGUAL = 73;
  /** RegularExpression Id. */
  int IGUAL = 74;
  /** RegularExpression Id. */
  int DIFERENTE = 75;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\"public static void main()\"",
    "\"programa \"",
    "\"(\"",
    "\")\"",
    "\"{\"",
    "\"}\"",
    "\";\"",
    "\"int\"",
    "<NUMBER>",
    "<IDENTIFIER>",
    "\" \"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\r\"",
    "\"\\f\"",
    "\"and\"",
    "\"array\"",
    "\"asm\"",
    "\"begin\"",
    "\"case\"",
    "\"const\"",
    "\"constructor\"",
    "\"destructor\"",
    "\"div\"",
    "\"do\"",
    "\"downto\"",
    "\"else\"",
    "\"end\"",
    "\"file\"",
    "\"for\"",
    "\"foward\"",
    "\"function\"",
    "\"goto\"",
    "\"if\"",
    "\"implementation\"",
    "\"in\"",
    "\"inline\"",
    "\"interface\"",
    "\"label\"",
    "\"mod\"",
    "\"nil\"",
    "\"not\"",
    "\"object\"",
    "\"of\"",
    "\"or\"",
    "\"PACKED\"",
    "\"procedure\"",
    "\"program\"",
    "\"record\"",
    "\"repeat\"",
    "\"set\"",
    "\"shl\"",
    "\"shr\"",
    "\"string\"",
    "\"then\"",
    "\"to\"",
    "\"type\"",
    "\"unit\"",
    "\"until\"",
    "\"uses\"",
    "\"var\"",
    "\"while\"",
    "\"with\"",
    "\"xor\"",
    "\"-\"",
    "\"+\"",
    "\"*\"",
    "\"/\"",
    "\"%\"",
    "\">\"",
    "\"<\"",
    "\">=\"",
    "\"<=\"",
    "\"=\"",
    "\"<>\"",
  };

}
