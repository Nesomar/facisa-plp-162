/* Generated By:JavaCC: Do not edit this line. AnalizadorLexicoTokenManager.java */

/** Token Manager. */
public class AnalizadorLexicoTokenManager implements AnalizadorLexicoConstants
{

  /** Debug output. */
  public static  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public static  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private static final int jjStopStringLiteralDfa_0(int pos, long active0, long active1)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0xffffffffffff0106L) != 0L || (active1 & 0x1L) != 0L)
         {
            jjmatchedKind = 10;
            return 2;
         }
         return -1;
      case 1:
         if ((active0 & 0xffffffffffff0106L) != 0L || (active1 & 0x1L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 10;
               jjmatchedPos = 1;
            }
            return 2;
         }
         return -1;
      case 2:
         if ((active0 & 0x4000000100L) != 0L)
            return 2;
         if ((active0 & 0xfeffcfabfdff0006L) != 0L || (active1 & 0x1L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 10;
               jjmatchedPos = 2;
            }
            return 2;
         }
         return -1;
      case 3:
         if ((active0 & 0xdec7c8ebacfa0006L) != 0L)
         {
            jjmatchedKind = 10;
            jjmatchedPos = 3;
            return 2;
         }
         return -1;
      case 4:
         if ((active0 & 0x4847c8e984ea0006L) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               jjmatchedKind = 10;
               jjmatchedPos = 4;
            }
            return 2;
         }
         return -1;
      case 5:
         if ((active0 & 0x47c86984c00006L) != 0L)
         {
            jjmatchedKind = 10;
            jjmatchedPos = 5;
            return 2;
         }
         return -1;
      case 6:
         if ((active0 & 0x1804900c00004L) != 0L)
         {
            if (jjmatchedPos != 6)
            {
               jjmatchedKind = 10;
               jjmatchedPos = 6;
            }
            return 2;
         }
         if ((active0 & 0x2L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 10;
               jjmatchedPos = 5;
            }
            return -1;
         }
         return -1;
      case 7:
         if ((active0 & 0x804900c00004L) != 0L)
         {
            jjmatchedKind = 10;
            jjmatchedPos = 7;
            return 2;
         }
         if ((active0 & 0x2L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 10;
               jjmatchedPos = 5;
            }
            return -1;
         }
         return -1;
      case 8:
         if ((active0 & 0x804800c00000L) != 0L)
         {
            jjmatchedKind = 10;
            jjmatchedPos = 8;
            return 2;
         }
         if ((active0 & 0x2L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 10;
               jjmatchedPos = 5;
            }
            return -1;
         }
         return -1;
      case 9:
         if ((active0 & 0x800c00000L) != 0L)
         {
            jjmatchedKind = 10;
            jjmatchedPos = 9;
            return 2;
         }
         if ((active0 & 0x2L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 10;
               jjmatchedPos = 5;
            }
            return -1;
         }
         return -1;
      case 10:
         if ((active0 & 0x2L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 10;
               jjmatchedPos = 5;
            }
            return -1;
         }
         if ((active0 & 0x800400000L) != 0L)
         {
            jjmatchedKind = 10;
            jjmatchedPos = 10;
            return 2;
         }
         return -1;
      case 11:
         if ((active0 & 0x800000000L) != 0L)
         {
            jjmatchedKind = 10;
            jjmatchedPos = 11;
            return 2;
         }
         if ((active0 & 0x2L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 10;
               jjmatchedPos = 5;
            }
            return -1;
         }
         return -1;
      case 12:
         if ((active0 & 0x800000000L) != 0L)
         {
            jjmatchedKind = 10;
            jjmatchedPos = 12;
            return 2;
         }
         if ((active0 & 0x2L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 10;
               jjmatchedPos = 5;
            }
            return -1;
         }
         return -1;
      case 13:
         if ((active0 & 0x800000000L) != 0L)
         {
            jjmatchedKind = 10;
            jjmatchedPos = 13;
            return 2;
         }
         if ((active0 & 0x2L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 10;
               jjmatchedPos = 5;
            }
            return -1;
         }
         return -1;
      case 14:
         if ((active0 & 0x2L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 10;
               jjmatchedPos = 5;
            }
            return -1;
         }
         return -1;
      case 15:
         if ((active0 & 0x2L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 10;
               jjmatchedPos = 5;
            }
            return -1;
         }
         return -1;
      case 16:
         if ((active0 & 0x2L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 10;
               jjmatchedPos = 5;
            }
            return -1;
         }
         return -1;
      case 17:
         if ((active0 & 0x2L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 10;
               jjmatchedPos = 5;
            }
            return -1;
         }
         return -1;
      case 18:
         if ((active0 & 0x2L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 10;
               jjmatchedPos = 5;
            }
            return -1;
         }
         return -1;
      case 19:
         if ((active0 & 0x2L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 10;
               jjmatchedPos = 5;
            }
            return -1;
         }
         return -1;
      case 20:
         if ((active0 & 0x2L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 10;
               jjmatchedPos = 5;
            }
            return -1;
         }
         return -1;
      case 21:
         if ((active0 & 0x2L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 10;
               jjmatchedPos = 5;
            }
            return -1;
         }
         return -1;
      case 22:
         if ((active0 & 0x2L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 10;
               jjmatchedPos = 5;
            }
            return -1;
         }
         return -1;
      case 23:
         if ((active0 & 0x2L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 10;
               jjmatchedPos = 5;
            }
            return -1;
         }
         return -1;
      default :
         return -1;
   }
}
private static final int jjStartNfa_0(int pos, long active0, long active1)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
}
static private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
static private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 37:
         return jjStopAtPos(0, 69);
      case 40:
         return jjStopAtPos(0, 3);
      case 41:
         return jjStopAtPos(0, 4);
      case 42:
         return jjStopAtPos(0, 67);
      case 43:
         return jjStopAtPos(0, 66);
      case 45:
         return jjStopAtPos(0, 65);
      case 47:
         return jjStopAtPos(0, 68);
      case 59:
         return jjStopAtPos(0, 7);
      case 60:
         jjmatchedKind = 71;
         return jjMoveStringLiteralDfa1_0(0x0L, 0xa00L);
      case 61:
         return jjStopAtPos(0, 74);
      case 62:
         jjmatchedKind = 70;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x100L);
      case 80:
         return jjMoveStringLiteralDfa1_0(0x400000000000L, 0x0L);
      case 97:
         return jjMoveStringLiteralDfa1_0(0x70000L, 0x0L);
      case 98:
         return jjMoveStringLiteralDfa1_0(0x80000L, 0x0L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x700000L, 0x0L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x7800000L, 0x0L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x18000000L, 0x0L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x1e0000000L, 0x0L);
      case 103:
         return jjMoveStringLiteralDfa1_0(0x200000000L, 0x0L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x7c00000100L, 0x0L);
      case 108:
         return jjMoveStringLiteralDfa1_0(0x8000000000L, 0x0L);
      case 109:
         return jjMoveStringLiteralDfa1_0(0x10000000000L, 0x0L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0x60000000000L, 0x0L);
      case 111:
         return jjMoveStringLiteralDfa1_0(0x380000000000L, 0x0L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0x1800000000006L, 0x0L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x6000000000000L, 0x0L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x78000000000000L, 0x0L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x380000000000000L, 0x0L);
      case 117:
         return jjMoveStringLiteralDfa1_0(0x1c00000000000000L, 0x0L);
      case 118:
         return jjMoveStringLiteralDfa1_0(0x2000000000000000L, 0x0L);
      case 119:
         return jjMoveStringLiteralDfa1_0(0xc000000000000000L, 0x0L);
      case 120:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1L);
      case 123:
         return jjStopAtPos(0, 5);
      case 125:
         return jjStopAtPos(0, 6);
      default :
         return jjMoveNfa_0(1, 0);
   }
}
static private int jjMoveStringLiteralDfa1_0(long active0, long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1);
      return 1;
   }
   switch(curChar)
   {
      case 61:
         if ((active1 & 0x100L) != 0L)
            return jjStopAtPos(1, 72);
         else if ((active1 & 0x200L) != 0L)
            return jjStopAtPos(1, 73);
         break;
      case 62:
         if ((active1 & 0x800L) != 0L)
            return jjStopAtPos(1, 75);
         break;
      case 65:
         return jjMoveStringLiteralDfa2_0(active0, 0x400000000000L, active1, 0L);
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x2000008000100000L, active1, 0L);
      case 98:
         return jjMoveStringLiteralDfa2_0(active0, 0x80000000000L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0xe000000880000L, active1, 0L);
      case 102:
         if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(1, 10, 2);
         else if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 10, 2);
         break;
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x40b0000000000000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000020021000000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000000L, active1, 0L);
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0x800000000L, active1, 0L);
      case 110:
         if ((active0 & 0x1000000000L) != 0L)
         {
            jjmatchedKind = 10;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0xc00006010010100L, active1, 0L);
      case 111:
         if ((active0 & 0x2000000L) != 0L)
         {
            jjmatchedKind = 10;
            jjmatchedPos = 1;
         }
         else if ((active0 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 10, 2);
         return jjMoveStringLiteralDfa2_0(active0, 0x502c4600000L, active1, 0x1L);
      case 114:
         if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 10, 2);
         return jjMoveStringLiteralDfa2_0(active0, 0x1800000020004L, active1, 0L);
      case 115:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000000000040000L, active1, 0L);
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0x40000000000000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x100000002L, active1, 0L);
      case 121:
         return jjMoveStringLiteralDfa2_0(active0, 0x200000000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1);
}
static private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(0, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1);
      return 2;
   }
   switch(curChar)
   {
      case 67:
         return jjMoveStringLiteralDfa3_0(active0, 0x400000000000L, active1, 0L);
      case 98:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000000002L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000000000000L, active1, 0L);
      case 100:
         if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(2, 10, 2);
         else if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(2, 10, 2);
         else if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 10, 2);
         break;
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x1080000000000000L, active1, 0L);
      case 103:
         return jjMoveStringLiteralDfa3_0(active0, 0x80000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x4400000000000000L, active1, 0L);
      case 106:
         return jjMoveStringLiteralDfa3_0(active0, 0x80000000000L, active1, 0L);
      case 108:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 10, 2);
         else if ((active0 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 10, 2);
         return jjMoveStringLiteralDfa3_0(active0, 0x2020000000L, active1, 0L);
      case 109:
         if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(2, 10, 2);
         break;
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x100600000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x1800000000004L, active1, 0L);
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0x204000800000000L, active1, 0L);
      case 114:
         if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(2, 10, 2);
         else if ((active0 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 10, 2);
         else if ((active0 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 10, 2);
         else if ((active1 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(2, 10, 2);
         return jjMoveStringLiteralDfa3_0(active0, 0x40000000020000L, active1, 0L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x8900000L, active1, 0L);
      case 116:
         if ((active0 & 0x100L) != 0L)
         {
            jjmatchedKind = 8;
            jjmatchedPos = 2;
         }
         else if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 10, 2);
         else if ((active0 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 10, 2);
         return jjMoveStringLiteralDfa3_0(active0, 0x8800004200000000L, active1, 0L);
      case 118:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(2, 10, 2);
         break;
      case 119:
         return jjMoveStringLiteralDfa3_0(active0, 0x84000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1);
}
static private int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(1, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, 0L);
      return 3;
   }
   switch(curChar)
   {
      case 75:
         return jjMoveStringLiteralDfa4_0(active0, 0x400000000000L);
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x80020000L);
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0x800100000000L);
      case 101:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(3, 10, 2);
         else if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(3, 10, 2);
         else if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(3, 10, 2);
         else if ((active0 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 10, 2);
         return jjMoveStringLiteralDfa4_0(active0, 0x408c000000000L);
      case 103:
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000000004L);
      case 104:
         if ((active0 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 10, 2);
         break;
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x840002000080000L);
      case 108:
         return jjMoveStringLiteralDfa4_0(active0, 0x4000000800000002L);
      case 110:
         if ((active0 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 10, 2);
         return jjMoveStringLiteralDfa4_0(active0, 0x4000000L);
      case 111:
         if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(3, 10, 2);
         return jjMoveStringLiteralDfa4_0(active0, 0x2000000000000L);
      case 115:
         if ((active0 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 10, 2);
         return jjMoveStringLiteralDfa4_0(active0, 0x600000L);
      case 116:
         if ((active0 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 10, 2);
         return jjMoveStringLiteralDfa4_0(active0, 0x800000L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, 0L);
}
static private int jjMoveStringLiteralDfa4_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(2, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, 0L);
      return 4;
   }
   switch(curChar)
   {
      case 69:
         return jjMoveStringLiteralDfa5_0(active0, 0x400000000000L);
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x4000000000000L);
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0x80000000000L);
      case 101:
         if ((active0 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 10, 2);
         return jjMoveStringLiteralDfa5_0(active0, 0x800800000000L);
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x2L);
      case 108:
         if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 10, 2);
         else if ((active0 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 10, 2);
         break;
      case 110:
         if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(4, 10, 2);
         return jjMoveStringLiteralDfa5_0(active0, 0x40002000000000L);
      case 114:
         return jjMoveStringLiteralDfa5_0(active0, 0x3004080800004L);
      case 116:
         if ((active0 & 0x200000L) != 0L)
         {
            jjmatchedKind = 10;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x104400000L);
      case 121:
         if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(4, 10, 2);
         break;
      default :
         break;
   }
   return jjStartNfa_0(3, active0, 0L);
}
static private int jjMoveStringLiteralDfa5_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, 0L);
      return 5;
   }
   switch(curChar)
   {
      case 68:
         if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 10, 2);
         break;
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0x1000000000004L);
      case 99:
         return jjMoveStringLiteralDfa6_0(active0, 0x2L);
      case 100:
         if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(5, 10, 2);
         else if ((active0 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 10, 2);
         return jjMoveStringLiteralDfa6_0(active0, 0x800000000000L);
      case 101:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 10, 2);
         break;
      case 102:
         return jjMoveStringLiteralDfa6_0(active0, 0x4000000000L);
      case 103:
         if ((active0 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 10, 2);
         break;
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x100000000L);
      case 109:
         return jjMoveStringLiteralDfa6_0(active0, 0x800000000L);
      case 111:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(5, 10, 2);
         break;
      case 114:
         return jjMoveStringLiteralDfa6_0(active0, 0x400000L);
      case 116:
         if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 10, 2);
         else if ((active0 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 10, 2);
         break;
      case 117:
         return jjMoveStringLiteralDfa6_0(active0, 0x800000L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0, 0L);
}
static private int jjMoveStringLiteralDfa6_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, 0L);
      return 6;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa7_0(active0, 0x2L);
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0x4000000000L);
      case 99:
         return jjMoveStringLiteralDfa7_0(active0, 0x800000L);
      case 101:
         return jjMoveStringLiteralDfa7_0(active0, 0x800000000L);
      case 109:
         if ((active0 & 0x1000000000000L) != 0L)
         {
            jjmatchedKind = 10;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active0, 0x4L);
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0x100000000L);
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0x800000400000L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0, 0L);
}
static private int jjMoveStringLiteralDfa7_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(5, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, 0L);
      return 7;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa8_0(active0, 0x4L);
      case 99:
         return jjMoveStringLiteralDfa8_0(active0, 0x4000400000L);
      case 110:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(7, 10, 2);
         return jjMoveStringLiteralDfa8_0(active0, 0x800000000L);
      case 114:
         return jjMoveStringLiteralDfa8_0(active0, 0x800000000000L);
      case 115:
         return jjMoveStringLiteralDfa8_0(active0, 0x2L);
      case 116:
         return jjMoveStringLiteralDfa8_0(active0, 0x800000L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0, 0L);
}
static private int jjMoveStringLiteralDfa8_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(6, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, 0L);
      return 8;
   }
   switch(curChar)
   {
      case 32:
         if ((active0 & 0x4L) != 0L)
            return jjStopAtPos(8, 2);
         break;
      case 101:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 10, 2);
         else if ((active0 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 10, 2);
         break;
      case 111:
         return jjMoveStringLiteralDfa9_0(active0, 0x800000L);
      case 116:
         return jjMoveStringLiteralDfa9_0(active0, 0x800400002L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0, 0L);
}
static private int jjMoveStringLiteralDfa9_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(7, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, 0L);
      return 9;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa10_0(active0, 0x800000002L);
      case 111:
         return jjMoveStringLiteralDfa10_0(active0, 0x400000L);
      case 114:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(9, 10, 2);
         break;
      default :
         break;
   }
   return jjStartNfa_0(8, active0, 0L);
}
static private int jjMoveStringLiteralDfa10_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(8, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0, 0L);
      return 10;
   }
   switch(curChar)
   {
      case 114:
         if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(10, 10, 2);
         break;
      case 116:
         return jjMoveStringLiteralDfa11_0(active0, 0x800000002L);
      default :
         break;
   }
   return jjStartNfa_0(9, active0, 0L);
}
static private int jjMoveStringLiteralDfa11_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(9, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0, 0L);
      return 11;
   }
   switch(curChar)
   {
      case 105:
         return jjMoveStringLiteralDfa12_0(active0, 0x800000002L);
      default :
         break;
   }
   return jjStartNfa_0(10, active0, 0L);
}
static private int jjMoveStringLiteralDfa12_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(10, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, active0, 0L);
      return 12;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa13_0(active0, 0x2L);
      case 111:
         return jjMoveStringLiteralDfa13_0(active0, 0x800000000L);
      default :
         break;
   }
   return jjStartNfa_0(11, active0, 0L);
}
static private int jjMoveStringLiteralDfa13_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(11, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(12, active0, 0L);
      return 13;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa14_0(active0, 0x2L);
      case 110:
         if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(13, 10, 2);
         break;
      default :
         break;
   }
   return jjStartNfa_0(12, active0, 0L);
}
static private int jjMoveStringLiteralDfa14_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(12, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(13, active0, 0L);
      return 14;
   }
   switch(curChar)
   {
      case 118:
         return jjMoveStringLiteralDfa15_0(active0, 0x2L);
      default :
         break;
   }
   return jjStartNfa_0(13, active0, 0L);
}
static private int jjMoveStringLiteralDfa15_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(13, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(14, active0, 0L);
      return 15;
   }
   switch(curChar)
   {
      case 111:
         return jjMoveStringLiteralDfa16_0(active0, 0x2L);
      default :
         break;
   }
   return jjStartNfa_0(14, active0, 0L);
}
static private int jjMoveStringLiteralDfa16_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(14, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(15, active0, 0L);
      return 16;
   }
   switch(curChar)
   {
      case 105:
         return jjMoveStringLiteralDfa17_0(active0, 0x2L);
      default :
         break;
   }
   return jjStartNfa_0(15, active0, 0L);
}
static private int jjMoveStringLiteralDfa17_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(15, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(16, active0, 0L);
      return 17;
   }
   switch(curChar)
   {
      case 100:
         return jjMoveStringLiteralDfa18_0(active0, 0x2L);
      default :
         break;
   }
   return jjStartNfa_0(16, active0, 0L);
}
static private int jjMoveStringLiteralDfa18_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(16, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(17, active0, 0L);
      return 18;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa19_0(active0, 0x2L);
      default :
         break;
   }
   return jjStartNfa_0(17, active0, 0L);
}
static private int jjMoveStringLiteralDfa19_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(17, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(18, active0, 0L);
      return 19;
   }
   switch(curChar)
   {
      case 109:
         return jjMoveStringLiteralDfa20_0(active0, 0x2L);
      default :
         break;
   }
   return jjStartNfa_0(18, active0, 0L);
}
static private int jjMoveStringLiteralDfa20_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(18, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(19, active0, 0L);
      return 20;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa21_0(active0, 0x2L);
      default :
         break;
   }
   return jjStartNfa_0(19, active0, 0L);
}
static private int jjMoveStringLiteralDfa21_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(19, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(20, active0, 0L);
      return 21;
   }
   switch(curChar)
   {
      case 105:
         return jjMoveStringLiteralDfa22_0(active0, 0x2L);
      default :
         break;
   }
   return jjStartNfa_0(20, active0, 0L);
}
static private int jjMoveStringLiteralDfa22_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(20, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(21, active0, 0L);
      return 22;
   }
   switch(curChar)
   {
      case 110:
         return jjMoveStringLiteralDfa23_0(active0, 0x2L);
      default :
         break;
   }
   return jjStartNfa_0(21, active0, 0L);
}
static private int jjMoveStringLiteralDfa23_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(21, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(22, active0, 0L);
      return 23;
   }
   switch(curChar)
   {
      case 40:
         return jjMoveStringLiteralDfa24_0(active0, 0x2L);
      default :
         break;
   }
   return jjStartNfa_0(22, active0, 0L);
}
static private int jjMoveStringLiteralDfa24_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(22, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(23, active0, 0L);
      return 24;
   }
   switch(curChar)
   {
      case 41:
         if ((active0 & 0x2L) != 0L)
            return jjStopAtPos(24, 1);
         break;
      default :
         break;
   }
   return jjStartNfa_0(23, active0, 0L);
}
static private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 3;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
               case 0:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 9)
                     kind = 9;
                  jjCheckNAdd(0);
                  break;
               case 2:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 10)
                     kind = 10;
                  jjstateSet[jjnewStateCnt++] = 2;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 10)
                     kind = 10;
                  jjCheckNAdd(2);
                  break;
               case 2:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 10)
                     kind = 10;
                  jjCheckNAdd(2);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 3 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
};

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", 
"\160\165\142\154\151\143\40\163\164\141\164\151\143\40\166\157\151\144\40\155\141\151\156\50\51", "\160\162\157\147\162\141\155\141\40", "\50", "\51", "\173", "\175", "\73", 
"\151\156\164", null, null, null, null, null, null, null, "\141\156\144", 
"\141\162\162\141\171", "\141\163\155", "\142\145\147\151\156", "\143\141\163\145", 
"\143\157\156\163\164", "\143\157\156\163\164\162\165\143\164\157\162", 
"\144\145\163\164\162\165\143\164\157\162", "\144\151\166", "\144\157", "\144\157\167\156\164\157", "\145\154\163\145", 
"\145\156\144", "\146\151\154\145", "\146\157\162", "\146\157\167\141\162\144", 
"\146\165\156\143\164\151\157\156", "\147\157\164\157", "\151\146", 
"\151\155\160\154\145\155\145\156\164\141\164\151\157\156", "\151\156", "\151\156\154\151\156\145", 
"\151\156\164\145\162\146\141\143\145", "\154\141\142\145\154", "\155\157\144", "\156\151\154", "\156\157\164", 
"\157\142\152\145\143\164", "\157\146", "\157\162", "\120\101\103\113\105\104", 
"\160\162\157\143\145\144\165\162\145", "\160\162\157\147\162\141\155", "\162\145\143\157\162\144", 
"\162\145\160\145\141\164", "\163\145\164", "\163\150\154", "\163\150\162", "\163\164\162\151\156\147", 
"\164\150\145\156", "\164\157", "\164\171\160\145", "\165\156\151\164", "\165\156\164\151\154", 
"\165\163\145\163", "\166\141\162", "\167\150\151\154\145", "\167\151\164\150", "\170\157\162", 
"\55", "\53", "\52", "\57", "\45", "\76", "\74", "\76\75", "\74\75", "\75", "\74\76", };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
};
static final long[] jjtoToken = {
   0xffffffffffff07ffL, 0xfffL, 
};
static final long[] jjtoSkip = {
   0xf800L, 0x0L, 
};
static protected SimpleCharStream input_stream;
static private final int[] jjrounds = new int[3];
static private final int[] jjstateSet = new int[6];
private static final StringBuilder jjimage = new StringBuilder();
private static StringBuilder image = jjimage;
private static int jjimageLen;
private static int lengthOfMatch;
static protected char curChar;
/** Constructor. */
public AnalizadorLexicoTokenManager(SimpleCharStream stream){
   if (input_stream != null)
      throw new TokenMgrError("ERROR: Second call to constructor of static lexer. You must use ReInit() to initialize the static variables.", TokenMgrError.STATIC_LEXER_ERROR);
   input_stream = stream;
}

/** Constructor. */
public AnalizadorLexicoTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
static public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
static private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 3; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
static public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
static public void SwitchTo(int lexState)
{
   if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

static protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

static int curLexState = 0;
static int defaultLexState = 0;
static int jjnewStateCnt;
static int jjround;
static int jjmatchedPos;
static int jjmatchedKind;

/** Get the next Token. */
public static Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }
   image = jjimage;
   image.setLength(0);
   jjimageLen = 0;

   try { input_stream.backup(0);
      while (curChar <= 32 && (0x100003600L & (1L << curChar)) != 0L)
         curChar = input_stream.BeginToken();
   }
   catch (java.io.IOException e1) { continue EOFLoop; }
   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         TokenLexicalActions(matchedToken);
         return matchedToken;
      }
      else
      {
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

static void TokenLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      case 1 :
        image.append(jjstrLiteralImages[1]);
        lengthOfMatch = jjstrLiteralImages[1].length();
                                            System.out.println("MAIN -> "+image);
         break;
      case 2 :
        image.append(jjstrLiteralImages[2]);
        lengthOfMatch = jjstrLiteralImages[2].length();
                                 System.out.println("PROGRAMA -> "+image);
         break;
      default :
         break;
   }
}
static private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
static private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
static private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

}
